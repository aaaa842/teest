"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_three_ThreeScene_js";
exports.ids = ["src_three_ThreeScene_js"];
exports.modules = {

/***/ "./src/three/ThreeScene.js":
/*!*********************************!*\
  !*** ./src/three/ThreeScene.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ThreeScene)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction ThreeScene({ data, width = 1380, height = 850 }) {\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let THREE;\n        let renderer, scene, camera, controls;\n        let animationId;\n        async function setup() {\n            // dynamic import so it only runs in client\n            THREE = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! three */ \"three\"));\n            const { OrbitControls } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/three\").then(__webpack_require__.bind(__webpack_require__, /*! three/examples/jsm/controls/OrbitControls */ \"./node_modules/three/examples/jsm/controls/OrbitControls.js\"));\n            renderer = new THREE.WebGLRenderer({\n                antialias: true,\n                alpha: true\n            });\n            renderer.setSize(width, height);\n            renderer.setPixelRatio(window.devicePixelRatio || 1);\n            scene = new THREE.Scene();\n            scene.background = new THREE.Color(0x081226);\n            camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 5000);\n            camera.position.set(0, 400, 800);\n            controls = new OrbitControls(camera, renderer.domElement);\n            controls.enableDamping = true;\n            controls.dampingFactor = 0.07;\n            controls.minDistance = 200;\n            controls.maxDistance = 2000;\n            // lights\n            const hemi = new THREE.HemisphereLight(0xffffff, 0x444444, 0.6);\n            hemi.position.set(0, 200, 0);\n            scene.add(hemi);\n            const dir = new THREE.DirectionalLight(0xffffff, 0.8);\n            dir.position.set(100, 200, 100);\n            scene.add(dir);\n            // ground plane\n            const ground = new THREE.Mesh(new THREE.PlaneGeometry(2000, 2000), new THREE.MeshStandardMaterial({\n                color: 0x071026\n            }));\n            ground.rotation.x = -Math.PI / 2;\n            ground.position.y = -1;\n            scene.add(ground);\n            // create bars from data (if available)\n            const group = new THREE.Group();\n            scene.add(group);\n            // tooltip DOM\n            const tooltip = document.createElement(\"div\");\n            tooltip.style.position = \"absolute\";\n            tooltip.style.pointerEvents = \"none\";\n            tooltip.style.padding = \"8px 10px\";\n            tooltip.style.borderRadius = \"6px\";\n            tooltip.style.background = \"rgba(0,0,0,0.6)\";\n            tooltip.style.color = \"#fff\";\n            tooltip.style.fontSize = \"13px\";\n            tooltip.style.display = \"none\";\n            tooltip.style.zIndex = 9999;\n            document.body.appendChild(tooltip);\n            let hovered = null;\n            const raycaster = new THREE.Raycaster();\n            const mouse = new THREE.Vector2();\n            function buildFromData(d) {\n                // clear group\n                while(group.children.length)group.remove(group.children[0]);\n                if (!d || !d.length) return;\n                // expect columns: site, value (numeric). Normalize keys\n                const rows = d.map((r)=>{\n                    const keys = Object.keys(r);\n                    const site = r[\"site\"] || r[\"Site\"] || r[\"الموقع\"] || r[keys[0]];\n                    const rawVal = r[\"value\"] || r[\"Value\"] || r[\"النسبة\"] || r[\"النسبة (%)\"] || r[keys[1]] || r[keys.find((k)=>/percent|%|value|نسبة|عدد/i.test(k))];\n                    const val = parseFloat(String(rawVal || \"\").replace(\"%\", \"\").replace(\",\", \".\")) || 0;\n                    return {\n                        site,\n                        val\n                    };\n                });\n                // layout grid\n                const cols = Math.max(1, Math.ceil(Math.sqrt(rows.length)));\n                const spacing = 60;\n                rows.forEach((row, i)=>{\n                    const col = i % cols;\n                    const r = Math.floor(i / cols);\n                    const x = (col - cols / 2) * spacing;\n                    const z = (r - cols / 2) * spacing;\n                    const height = Math.max(2, row.val * 6);\n                    const geo = new THREE.BoxGeometry(40, height, 40);\n                    const mat = new THREE.MeshStandardMaterial({\n                        color: row.val >= 50 ? 0x16a34a : 0x4f8cff,\n                        metalness: 0.2,\n                        roughness: 0.6\n                    });\n                    const m = new THREE.Mesh(geo, mat);\n                    m.position.set(x, height / 2, z);\n                    m.userData = {\n                        site: row.site,\n                        val: row.val\n                    };\n                    group.add(m);\n                });\n            }\n            function onPointerMove(e) {\n                const rect = renderer.domElement.getBoundingClientRect();\n                const x = (e.clientX - rect.left) / rect.width * 2 - 1;\n                const y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n                mouse.set(x, y);\n                raycaster.setFromCamera(mouse, camera);\n                const intersects = raycaster.intersectObjects(group.children, false);\n                if (intersects.length) {\n                    const hit = intersects[0].object;\n                    if (hovered !== hit) {\n                        if (hovered) hovered.material.emissive && hovered.material.emissive.setHex(0x000000);\n                        hovered = hit;\n                        if (hovered.material.emissive) hovered.material.emissive.setHex(0x222222);\n                    }\n                    tooltip.style.display = \"block\";\n                    tooltip.style.left = e.clientX + 12 + \"px\";\n                    tooltip.style.top = e.clientY + 12 + \"px\";\n                    tooltip.innerText = `${hit.userData.site || \"—\"}: ${hit.userData.val}`;\n                } else {\n                    if (hovered) hovered.material.emissive && hovered.material.emissive.setHex(0x000000);\n                    hovered = null;\n                    tooltip.style.display = \"none\";\n                }\n            }\n            renderer.domElement.addEventListener(\"pointermove\", onPointerMove);\n            // initial build\n            buildFromData(data);\n            // animate\n            function animate() {\n                controls.update();\n                renderer.render(scene, camera);\n                animationId = requestAnimationFrame(animate);\n            }\n            // attach\n            mountRef.current.appendChild(renderer.domElement);\n            animate();\n            // handle resize\n            function onResize() {\n                const w = width;\n                const h = height;\n                renderer.setSize(w, h);\n                camera.aspect = w / h;\n                camera.updateProjectionMatrix();\n            }\n            window.addEventListener(\"resize\", onResize);\n            // expose buildFromData for updates\n            mountRef.current._updateData = buildFromData;\n        }\n        setup();\n        return ()=>{\n            cancelAnimationFrame(animationId);\n            try {\n                if (mountRef.current && mountRef.current.firstChild) mountRef.current.removeChild(mountRef.current.firstChild);\n            } catch (e) {}\n            window.removeEventListener(\"resize\", ()=>{});\n        };\n    }, []);\n    // update when data changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (mountRef.current && mountRef.current._updateData) {\n            mountRef.current._updateData(data);\n        }\n    }, [\n        data\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mountRef,\n        style: {\n            width,\n            height\n        }\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Ahmed El-Sawy\\\\test_Oliver\\\\teest\\\\src\\\\three\\\\ThreeScene.js\",\n        lineNumber: 177,\n        columnNumber: 10\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/three/ThreeScene.js\n");

/***/ })

};
;